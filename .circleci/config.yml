version: 2.1

commands:
  install-dependencies:
    steps:
      - run:
          name: Add third-party repositories
          command: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo add-apt-repository -y --update ppa:ansible/ansible
      - run:
          name: Install necessary dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip curl software-properties-common terraform ansible
  build:
    parameters:
      image_name:
        type: string
      folder_path:
        type: string
    steps:
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Login to Dockerhub
          command: echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Build images
          command: docker build -t "$CIRCLE_USERNAME/geoapp_<< parameters.image_name >>" << parameters.folder_path >>
      - run:
          name: Push images
          command: docker push "$CIRCLE_USERNAME/geoapp_<< parameters.image_name >>"

jobs:
  build-farmacie:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: farmacie
          folder_path: ./app_farmacie
  build-parchi:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: parchi
          folder_path: ./app_parchi
  build-popolazione:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: popolazione
          folder_path: ./app_popolazione
  build-punti-interesse:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: punti_interesse
          folder_path: ./app_punti_interesse
  build-scuole:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: scuole
          folder_path: ./app_scuole
  build-geoserver:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: geoserver
          folder_path: ./geoserver
  build-nginx:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: nginx
          folder_path: ./infra/nginx

  provision:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Provision infrastructure
          command: |
            CURRENT_DEPLOYMENT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/current-deployment" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/terraform
            terraform init
            terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution="$CURRENT_DEPLOYMENT"
      - persist_to_workspace:
          root: ./
          paths:
            - ./infra/terraform

  configure:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'b5:f4:85:77:e1:ad:c2:fb:78:ef:49:cd:c8:60:41:e5'
      - install-dependencies
      - run:
          name: Install ansible aws_ec2 plugin dependencies
          command: |
            pip install boto3 botocore
      - run:
          name: Configure infrastructure
          command: |
            CURRENT_DEPLOYMENT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/current-deployment" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/ansible
            if [[ $CURRENT_DEPLOYMENT =~ blue ]]; then
              ansible-playbook configure.yaml -e "hosts=tag_Env_green"
            else
              ansible-playbook configure.yaml -e "hosts=tag_Env_blue"
            fi

  deploy:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'b5:f4:85:77:e1:ad:c2:fb:78:ef:49:cd:c8:60:41:e5'
      - install-dependencies
      - run:
          name: Install ansible aws_ec2 plugin dependencies
          command: |
            pip install boto3 botocore
      - run:
          name: Deploy apps
          command: |
            CURRENT_DEPLOYMENT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/current-deployment" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/ansible
            if [[ $CURRENT_DEPLOYMENT =~ blue ]]; then
              ansible-playbook deploy.yaml -e "hosts=tag_Env_green"
            else
              ansible-playbook deploy.yaml -e "hosts=tag_Env_blue"
            fi

  promote:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - attach_workspace:
          at: ./infra/terraform
      - install-dependencies
      - run:
          name: Promote infrastructure
          command: |
            CURRENT_DEPLOYMENT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/current-deployment" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/terraform
            if [[ $CURRENT_DEPLOYMENT =~ blue ]]; then
              terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution=green
            else
              terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution=blue
            fi

  smoke-test:
    docker:
      - image: cimg/base:2021.04
    steps:
      - attach_workspace:
          at: ./infra/terraform
      - run:
          name: Checking website
          command: |
            URL="http://devopslabs.xyz"
            if curl -s $URL | grep "Farmacie a Verona"; then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Rollback incase of failure
          when: on_fail
          command: |
            CURRENT_DEPLOYMENT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/current-deployment" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/terraform
            if [[ $CURRENT_DEPLOYMENT =~ blue ]]; then
              terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution=blue
            else
              terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution=green
            fi

  cleanup:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - attach_workspace:
          at: ./infra/terraform
      - install-dependencies
      - run:
          name: Cleanup infrastructure
          command: |
            CURRENT_DEPLOYMENT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/current-deployment" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/terraform
            if [[ $CURRENT_DEPLOYMENT =~ blue ]]; then
              terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution=green -var enable_blue_env=false
              curl "https://api.thisdb.com/v1/$THISDB_BUCKET/current-deployment" \
                -H "X-Api-Key: $THISDB_API_KEY" \
                -d "green"
            else
              terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution=blue -var enable_green_env=false
              curl "https://api.thisdb.com/v1/$THISDB_BUCKET/current-deployment" \
                -H "X-Api-Key: $THISDB_API_KEY" \
                -d "blue"
            fi

workflows:
  default:
    jobs:
      - build-farmacie
      - build-parchi
      - build-popolazione
      - build-punti-interesse
      - build-scuole
      - build-geoserver
      - build-nginx
      - provision:
          requires:
            - build-farmacie
            - build-parchi
            - build-popolazione
            - build-punti-interesse
            - build-scuole
            - build-geoserver
            - build-nginx
      - configure:
          requires:
            - provision
      - deploy:
          requires:
            - configure
      - promote:
          requires:
            - deploy
      - smoke-test:
          requires:
            - promote
      - cleanup:
          requires:
            - smoke-test
