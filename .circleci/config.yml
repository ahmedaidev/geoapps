version: 2.1

commands:
  install-dependencies:
    steps:
      - run:
          name: Add third-party repositories
          command: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      - run:
          name: Install necessary dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip curl software-properties-common terraform python3-pip
  build:
    parameters:
      image_name:
        type: string
      folder_path:
        type: string
    steps:
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Login to Dockerhub
          command: echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Build images
          command: docker build -t "$CIRCLE_USERNAME/geoapp_<< parameters.image_name >>" << parameters.folder_path >>
      - run:
          name: Push images
          command: docker push "$CIRCLE_USERNAME/geoapp_<< parameters.image_name >>"
  rollback:
    steps:
      - run:
          name: Rollback environment
          when: on_fail
          command: |
            NOW=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/now" -H "X-Api-Key: $THISDB_API_KEY")
            NEXT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/next" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/terraform
            terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution="$NOW" -var "enable_${NEXT}_env=false"

jobs:
  build-farmacie:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: farmacie
          folder_path: ./app_farmacie
  build-parchi:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: parchi
          folder_path: ./app_parchi
  build-popolazione:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: popolazione
          folder_path: ./app_popolazione
  build-punti-interesse:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: punti_interesse
          folder_path: ./app_punti_interesse
  build-scuole:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: scuole
          folder_path: ./app_scuole
  build-geoserver:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: geoserver
          folder_path: ./geoserver
  build-nginx:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - build:
          image_name: nginx
          folder_path: ./infra/nginx

  provision:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - install-dependencies
      - restore_cache:
          keys:
            - tf-modules
      - run:
          name: Provision infrastructure
          command: |
            STATE=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/terraform
            terraform init
            if [[ $STATE =~ now ]]; then
              NOW=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/now" -H "X-Api-Key: $THISDB_API_KEY")
              terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution="$NOW"
            else
              terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution="blue" -var enable_green_env=false
              curl "https://api.thisdb.com/v1/$THISDB_BUCKET/now" -H "X-Api-Key: $THISDB_API_KEY" -d "green"
              curl "https://api.thisdb.com/v1/$THISDB_BUCKET/next" -H "X-Api-Key: $THISDB_API_KEY" -d "blue"
            fi
      - save_cache:
          paths:
            - ~/project/infra/terraform # location depends on npm version
          key: tf-modules

  configure:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - tf-modules
      - add_ssh_keys:
          fingerprints:
            - 'b5:f4:85:77:e1:ad:c2:fb:78:ef:49:cd:c8:60:41:e5'
      - install-dependencies
      - run:
          name: Install ansible
          command: |
            pip3 install --user ansible boto3 paramiko
      - run:
          name: Configure infrastructure
          command: |
            NEXT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/next" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/ansible
            ansible-playbook configure.yaml -e "hosts=tag_Env_${NEXT}"
      - rollback

  deploy:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - tf-modules
      - add_ssh_keys:
          fingerprints:
            - 'b5:f4:85:77:e1:ad:c2:fb:78:ef:49:cd:c8:60:41:e5'
      - install-dependencies
      - run:
          name: Install ansible
          command: |
            pip3 install --user ansible boto3 paramiko
      - run:
          name: Deploy apps
          command: |
            NEXT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/next" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/ansible
            ansible-playbook deploy.yaml -e "hosts=tag_Env_${NEXT}"
      - rollback

  promote:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - restore_cache:
          keys:
            - tf-modules
      - install-dependencies
      - run:
          name: Promote infrastructure
          command: |
            NEXT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/next" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/terraform
            terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution="$NEXT"
      - rollback

  smoke-test:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - restore_cache:
          keys:
            - tf-modules
      - install-dependencies
      - run:
          name: Checking website
          command: |
            URL="http://farmacie.devopslabs.xyz"
            if curl -s $URL | grep "Verona"; then
              exit 0
            else
              exit 1
            fi
      - rollback

  cleanup:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - restore_cache:
          keys:
            - tf-modules
      - install-dependencies
      - run:
          name: Cleanup infrastructure
          command: |
            NOW=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/now" -H "X-Api-Key: $THISDB_API_KEY")
            NEXT=$(curl "https://api.thisdb.com/v1/$THISDB_BUCKET/next" -H "X-Api-Key: $THISDB_API_KEY")
            cd infra/terraform
            terraform apply -auto-approve -var workflow_id="${CIRCLE_WORKFLOW_ID:0:7}" -var traffic_distribution="$NEXT" -var "enable_${NOW}_env=false"
            curl "https://api.thisdb.com/v1/$THISDB_BUCKET/now" -H "X-Api-Key: $THISDB_API_KEY" -d "$NEXT"
            curl "https://api.thisdb.com/v1/$THISDB_BUCKET/next" -H "X-Api-Key: $THISDB_API_KEY" -d "$NOW"
      - rollback

workflows:
  default:
    jobs:
      # - build-farmacie
      # - build-parchi
      # - build-popolazione
      # - build-punti-interesse
      # - build-scuole
      # - build-geoserver
      # - build-nginx
      - provision:
          filters:
            branches:
              only:
                - main
          # requires:
          #   - build-farmacie
          #   - build-parchi
          #   - build-popolazione
          #   - build-punti-interesse
          #   - build-scuole
          #   - build-geoserver
          #   - build-nginx
      - configure:
          requires:
            - provision
      - deploy:
          requires:
            - configure
      - promote:
          requires:
            - deploy
      - smoke-test:
          requires:
            - promote
      - cleanup:
          requires:
            - smoke-test
